name: Push & Pull Request

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install and config Poetry
      run: |
        python -m pip install --upgrade pip poetry
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry config installer.parallel true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-root
    - name: Load cached pre-commit
      id: cached-pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Run pre-commit
      run: |
        source .venv/bin/activate
        pre-commit run --verbose --all-files --show-diff-on-failure
  build-and-upload-test-pypi:
    name: Build and upload to Test PyPi
    runs-on: ubuntu-latest
    needs: [pre-commit]
    strategy:
      matrix:
        python-version: ['3.9']
    steps:
    - name: Generate version
      run: |
        echo "VERSION=100.0.0-dev$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
    - name: Write version to file
      shell: bash
      run: |
        echo ${{ env.VERSION }} > version.txt
    - name: Upload version file for next job usage
      uses: actions/upload-artifact@v3
      with:
        name: workflow_version
        path: version.txt
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install and config Poetry
      run: |
        python -m pip install --upgrade pip poetry
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry config installer.parallel true
        poetry config repositories.testpypi ${{ secrets.TEST_PYPI_UPLOAD_URL }}
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-root --no-dev
    - name: Build
      run: |
        poetry version "${{ env.VERSION }}"
        poetry build
    - name: Upload to TestPypi
      if: ${{ matrix.python-version == '3.9' }}
      run: |
        poetry publish -r testpypi --username ${{ secrets.TEST_PYPI_USER_NAME }} --password ${{ secrets.TEST_PYPI_PASSWORD }}
  install-from-test-pypi-and-test:
    name: Install from Test PyPi and test
    runs-on: ubuntu-latest
    needs: [build-and-upload-test-pypi]
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - name: Download version file
      uses: actions/download-artifact@v3
      with:
        name: workflow_version
    - name: Get version from file and export to environment variable
      shell: bash
      run: |
        value=`cat version.txt`
        echo "VERSION=$value" >> $GITHUB_ENV
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install from TestPypi
      run: |
        python -m pip install --upgrade pip
        python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple git-search-command=="${{ env.VERSION }}"
    - name: Test command
      run: |
        gsc -i
